{"version":3,"sources":["components/InputTodo.js","components/EditTodo.js","components/ListTodos.js","App.js","reportWebVitals.js","index.js"],"names":["InputTodo","useState","description","setDescription","onSubmitForm","e","a","preventDefault","body","fetch","method","headers","JSON","stringify","window","location","console","error","message","className","onSubmit","type","value","onChange","target","placeholder","EditTodo","todo","updateDescription","id","class","onClick","ListTodos","todos","setTodos","deleteTodo","filter","getTodos","response","json","jsonData","log","useEffect","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.775d1c8d.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\n//Fragement allows you to group multiple elements without adding a extra node to the DOM\r\n\r\nconst InputTodo = () => {\r\n    //description will get and pass the value into the state 'setDescription'\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    //function will pass the data/value in a http server to the backend\r\n    const onSubmitForm = async(e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const body = { description }\r\n            const response = await fetch('http://localhost:5000/todos', {\r\n                method: 'POST',\r\n                headers: {\"Content-Type\":\"application/json\"},\r\n                body: JSON.stringify(body)\r\n            });\r\n            //console.log(response);\r\n            //browser will refresh and show changes\r\n            window.location = \"/\";\r\n        } catch (e) {\r\n            console.error(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 className=\"text-center mt-5\">Todo Task App</h1>\r\n            <form className=\"d-flex mt-5\" onSubmit={onSubmitForm}>\r\n                <input type=\"text\" className=\"form-control\" \r\n                value={description} \r\n                onChange={e => setDescription(e.target.value)} \r\n                placeholder=\"Enter new task...\"/>\r\n\r\n                <button className=\"btn btn-success\">Add</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default InputTodo;","import React, { Fragment, useState } from 'react';\r\n\r\nconst EditTodo = ({ todo }) => {\r\n    const [description, setDescription] = useState(todo.description);\r\n\r\n    //edit onclick description button function\r\n    const updateDescription = async(e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const body = {description};\r\n            const response = await fetch(`http://localhost:5000/todos/${todo.id}`, {\r\n                method: 'PUT',\r\n                headers: {\"Content-Type\":\"application/json\"},\r\n                body: JSON.stringify(body)\r\n            })\r\n            //reload the page to see change on page\r\n            window.location = \"/\";\r\n\r\n        } catch (e) {\r\n            console.error(e.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <button type=\"button\" class=\"btn btn-primary\" \r\n            data-toggle=\"modal\" \r\n            data-target={`#id${todo.id}`}> \r\n            Edit\r\n            </button>\r\n\r\n            {/* the todo.id template string, for 'data-target' above and 'id' element, and will target \r\n            the specific record in the list with corresponding id. */}\r\n            \r\n            {/* the onclick will set the input back to it's original value if editing process is cancelled without changes */}\r\n            <div class=\"modal\" id={`id${todo.id}`} onClick={() => setDescription(todo.description)}>\r\n                <div class=\"modal-dialog\">\r\n                    <div class=\"modal-content\">\r\n\r\n                        {/* the onclick will set the input back to it's original value if editing process is cancelled without changes */}\r\n                        <div class=\"modal-header\">\r\n                            <h4 class=\"modal-title\">Edit Task</h4>\r\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n                            onClick={() => setDescription(todo.description)}>&times;\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"modal-body\">\r\n                            {/* the task selected within the list to be edited, it's value will pass into the\r\n                            input field to be changed/updated inside the modal*/}\r\n                            <input type=\"text\" value={description} className=\"form-control\" \r\n                                onChange={e => setDescription(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div class=\"modal-footer\">\r\n                            {/* Save button */}\r\n                            {/* the onClick will submit the data to the server to update record */}\r\n                            <button \r\n                            type=\"button\" \r\n                            class=\"btn btn-warning\" \r\n                            data-dismiss=\"modal\"\r\n                            onClick={e => updateDescription(e)}>\r\n                                Save\r\n                            </button>\r\n                            {/* Close button */}\r\n                            {/* the onclick will set the input back to it's original value if editing process is cancelled without changes */}\r\n                            <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\"\r\n                                onClick={() => setDescription(todo.description)}>Close</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default EditTodo;","import React, { Fragment, useEffect, useState } from 'react';\r\n//component\r\nimport EditTodo from './EditTodo';\r\n\r\nconst ListTodos = () => {\r\n    //the useState will use todos to pass the value and setTodos will hold the data to send it to the server\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    //delete button function\r\n    const deleteTodo = async(id) => {\r\n        try {\r\n            //delete fetch request\r\n            const deleteTodo = await fetch(`http://localhost:5000/todos/${id}`, {\r\n                method: 'DELETE' //request method type\r\n            });\r\n            //using a filter to see updates real-time without reloading page\r\n            setTodos(todos.filter(todo => todo.id !== id));\r\n            //console.log(deleteTodo)\r\n        } catch (e) {\r\n            console.error(e.message)\r\n        }\r\n    }\r\n\r\n    const getTodos = async() => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/todos');\r\n            const jsonData = await response.json();\r\n            console.log(jsonData);\r\n            setTodos(jsonData);\r\n            \r\n        } catch (e) {\r\n            console.error(e.message);\r\n        }\r\n    }\r\n    //useEffect will make fetch request from API each time the component is rendered. \r\n    useEffect(() => {\r\n        getTodos();\r\n    }, []); //'[]' will allow only one request for array\r\n    //console.log(todos);\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <h1>List Todos</h1> */}\r\n            <table className=\"table mt-5 text-center\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Description</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* <tr>\r\n                        <td>John</td>\r\n                        <td>Doe</td>\r\n                        <td>john@example.com</td>\r\n                    </tr> */}\r\n                    {/* .map() will iterate each element in from 'todo' DB table */}\r\n                    {todos.map(todo => (\r\n                        // key={todo.id} specifics the record to be edited or removed\r\n                        <tr key={todo.id}>\r\n                            <td>{todo.description}</td>\r\n                            {/* edit, delete buttons */}\r\n                            <td>\r\n                                <EditTodo todo={todo} /> \r\n                            </td>\r\n                            <td><button className=\"btn btn-danger\" onClick={() => deleteTodo(todo.id)}>Delete</button></td>\r\n                        </tr>\r\n                    ))}\r\n                   \r\n                </tbody>\r\n            </table>\r\n        </Fragment>\r\n    \r\n    );\r\n}\r\n\r\nexport default ListTodos;","import React, {Fragment}  from 'react';\nimport './App.css';\n//components\nimport InputTodo from './components/InputTodo';\nimport ListTodos from './components/ListTodos';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <InputTodo />\n        <ListTodos />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}